A litte change by https://golang.org/pkg/context/#TODO


// gen generates integers in a separate goroutine and
// sends them to the returned channel.
// The callers of gen need to cancel the context once
// they are done consuming generated integers not to leak
// the internal goroutine started by gen.


This example demonstrates the use of a cancelable context to prevent a goroutine leak. By the end of the example function, the goroutine started by gen will return without leaking.

We can set a timer to cancel the context as we wish, but if no active goroutine is alive, program will exit by a fatal error(All goroutine are asleep).
